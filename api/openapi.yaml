openapi: 3.0.0

info:
  version: 1.0.0
  title: "KINTAI"
  description: >-
    "勤怠管理アプリ「KINTAI」"

servers:
  - url: "http://localhost:8003"
    description: "ローカル環境"

tags:
  - name: "admin"
    description: "管理者の操作"

paths:
  /admin/admins:
    get:
      summary: "全ての管理者の取得"
      tags: ["admin"]
      operationId: getAdmins
      deprecated: false
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admins"
components:
  schemas:
    Admins:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "example 管理者"
              email:
                type: string
                example: "kintai@example.com"
            required:
              - "id"
              - "name"
              - "email"
        pagenation:
          type: object
          properties:
            current:
              type: integer
              example: 1
            previous:
              type: integer
              example: null
              nullable: true
            next:
              type: integer
              example: 2
              nullable: true
            limit_value:
              type: integer
              example: 10
            pages:
              type: integer
              example: 3
            count:
              type: integer
              example: 30
      required:
        - data
# これからの参考にとりあえず残しておく
# /users:
#   get:
#     description: >
#       Returns all users
#     operationId: findUsers
#     parameters:
#       - name: tags
#         in: query
#         description: tags to filter by
#         required: false
#         style: form
#         schema:
#           type: array
#           items:
#             type: string
#       - name: limit
#         in: query
#         description: maximum number of results to return
#         required: false
#         schema:
#           type: integer
#           format: int32
#     responses:
#       "200":
#         description: user response
#         content:
#           application/json:
#             schema:
#               type: array
#               items:
#                 $ref: "#/components/schemas/User"
#       default:
#         description: unexpected error
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Error"
# components:
#   schemas:
#     User:
#       type: "object"
#       required:
#         - "name"
#       properties:
#         id:
#           type: "integer"
#           format: "int64"
#           example: 100
#         name:
#           type: "string"
#           example: "Taro"
#         status:
#           type: "string"
#           description: "user status"
#           enum:
#             - "pending"
#             - "active"
#             - "inactive"
#     Error:
#       type: "object"
#       properties:
#         code:
#           type: "integer"
#           format: "int32"
#         type:
#           type: "string"
#         message:
#           type: "string"
# externalDocs:
#   description: "Find out more about Swagger"
#   url: "http://swagger.io"
